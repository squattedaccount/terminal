/**
 * Language index
 * 
 * This file is dynamically generated by 'manage_translations.py'.
 * Do not edit this file manually, as your changes will be overwritten.
 */
import logger from '../../core/logger.js';

export const availableLanguages = {
  de: {
    name: 'German',
    nativeName: 'Deutsch',
  },
  en: {
    name: 'English',
    nativeName: 'English',
    isDefault: true
  },
  es: {
    name: 'Spanish',
    nativeName: 'Español',
  },
  fi: {
    name: 'fi',
    nativeName: 'fi',
  },
  zh: {
    name: 'Chinese',
    nativeName: '中文',
  }
};

// Cache for loaded language modules
const loadedLanguages = {};

/**
 * Lazy load a language module
 * @param {string} lang - Language code
 * @returns {Promise<Object>} - Language translations
 */
export async function loadLanguage(lang) {
  if (loadedLanguages[lang]) {
    return loadedLanguages[lang];
  }

  let module;
  try {
    switch (lang) {
      case 'de':
        module = await import('./de.json', { assert: { type: 'json' } });
        break;
      case 'en':
        module = await import('./en.json', { assert: { type: 'json' } });
        break;
      case 'es':
        module = await import('./es.json', { assert: { type: 'json' } });
        break;
      case 'fi':
        module = await import('./fi.json', { assert: { type: 'json' } });
        break;
      case 'zh':
        module = await import('./zh.json', { assert: { type: 'json' } });
        break;

      default:
        // Fallback to English for any language not explicitly handled
        logger.warn(`Language '${lang}' not found, falling back to 'en'.`);
        module = await import('./en.json', { assert: { type: 'json' } });
        lang = 'en'; // Ensure we cache under the correct key
        break;
    }
    // Handle cases where a bundler might not put the JSON behind a .default
    const translations = module.default || module;
    loadedLanguages[lang] = translations;
    return translations;
  } catch (error) {
    logger.error(`Failed to load language module for: ${lang}`, error);
    // Final fallback in case of a critical import error
    if (lang !== 'en') {
      logger.warn(`Falling back to English due to error.`);
      return loadLanguage('en');
    }
    return {};
  }
}

/**
 * Get the default language code
 * @returns {string} - Default language code
 */
export function getDefaultLanguage() {
  for (const [code, meta] of Object.entries(availableLanguages)) {
    if (meta.isDefault) {
      return code;
    }
  }
  return 'en'; // Fallback to English if no default is specified
}

/**
 * Check if a language is available
 * @param {string} lang - Language code to check
 * @returns {boolean} - Whether the language is available
 */
export function isLanguageAvailable(lang) {
  return !!availableLanguages[lang];
}
